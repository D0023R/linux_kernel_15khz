diff -Naur linux-5.3_stock/drivers/gpu/drm/drm_client_modeset.c linux-5.3/drivers/gpu/drm/drm_client_modeset.c
--- linux-5.3_stock/drivers/gpu/drm/drm_client_modeset.c	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/drivers/gpu/drm/drm_client_modeset.c	2019-09-16 19:01:32.510176615 +0200
@@ -146,6 +146,34 @@
 	if (cmdline_mode->rb || cmdline_mode->margins)
 		goto create_mode;
 
+        if (cmdline_mode->c15khz) {
+                mode = drm_mode_find_c15khz(connector->dev,
+                        cmdline_mode->xres,
+                        cmdline_mode->yres,
+                        (cmdline_mode->refresh_specified) ?
+                                cmdline_mode->refresh : 0);
+
+                if (mode) {
+                        drm_mode_set_crtcinfo(mode, CRTC_INTERLACE_HALVE_V);
+                        list_add(&mode->head, &connector->modes);
+                        return mode;
+                }
+        }
+
+        if (cmdline_mode->c25khz) {
+                mode = drm_mode_find_c25khz(connector->dev,
+                        cmdline_mode->xres,
+                        cmdline_mode->yres,
+                        (cmdline_mode->refresh_specified) ?
+                                cmdline_mode->refresh : 0);
+
+                if (mode) {
+                        drm_mode_set_crtcinfo(mode, CRTC_INTERLACE_HALVE_V);
+                        list_add(&mode->head, &connector->modes);
+                        return mode;
+                }
+        }
+
 	prefer_non_interlace = !cmdline_mode->interlace;
 again:
 	list_for_each_entry(mode, &connector->modes, head) {
diff -Naur linux-5.3_stock/drivers/gpu/drm/drm_connector.c linux-5.3/drivers/gpu/drm/drm_connector.c
--- linux-5.3_stock/drivers/gpu/drm/drm_connector.c	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/drivers/gpu/drm/drm_connector.c	2019-09-16 13:34:24.449047866 +0200
@@ -133,6 +133,9 @@
 						       mode))
 		return;
 
+        connector->c15khz = mode->c15khz;
+        connector->c25khz = mode->c25khz;
+
 	if (mode->force) {
 		DRM_INFO("forcing %s connector %s\n", connector->name,
 			 drm_get_connector_force_name(mode->force));
diff -Naur linux-5.3_stock/drivers/gpu/drm/drm_edid.c linux-5.3/drivers/gpu/drm/drm_edid.c
--- linux-5.3_stock/drivers/gpu/drm/drm_edid.c	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/drivers/gpu/drm/drm_edid.c	2019-09-16 11:16:29.740226791 +0200
@@ -214,6 +214,67 @@
 };
 
 /*
+ * Arcade modelines
+ *
+ */
+static struct drm_display_mode drm_c15khz_modes[] = {
+       /* 320x240@60.00 15.660 Khz */
+       { DRM_MODE("320x240", DRM_MODE_TYPE_DRIVER, 6640, 320, 336,
+                  368, 424, 0, 240, 242, 245, 261, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+       /* 640x480@60.00 15.750 Khz */
+       { DRM_MODE("640x480", DRM_MODE_TYPE_DRIVER, 13104, 640, 664,
+                  728, 832, 0, 480, 484, 490, 525, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+       /* 720x480@59.95 15.7369 Khz */
+       { DRM_MODE("720x480", DRM_MODE_TYPE_DRIVER, 14856, 720, 752,
+                  824, 944, 0, 480, 484, 490, 525, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+       /* 768x576 15.6250 Khz */
+       { DRM_MODE("768x576", DRM_MODE_TYPE_DRIVER, 15625, 768, 800,
+                  872, 1000, 0, 576, 582, 588, 625, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+       /* 800x600@50.00 15.725 Khz */
+       { DRM_MODE("800x576", DRM_MODE_TYPE_DRIVER, 16354, 800, 832,
+                  912, 1040, 0, 576, 584, 590, 629, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+       /* 1024@768@40.00 16.300 Khz */
+       { DRM_MODE("1024x768", DRM_MODE_TYPE_DRIVER, 21386, 1024, 1072,
+                  1168, 1312, 0, 768, 774, 780, 815, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+};
+static const int drm_num_c15khz_modes =
+       sizeof(drm_c15khz_modes) / sizeof(struct drm_display_mode);
+
+static struct drm_display_mode drm_c25khz_modes[] = {
+       /* 320x240@60.00 24.960 Khz */
+       { DRM_MODE("320x240", DRM_MODE_TYPE_DRIVER, 10782, 320, 352,
+                  384, 432, 0, 240, 318, 322, 416, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+       /* 512x384@58.59 24.960 Khz */
+       { DRM_MODE("512x384", DRM_MODE_TYPE_DRIVER, 16972, 512, 560,
+                  608, 680, 0, 384, 395, 399, 426, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC) },
+       /* 800x600@60.00 24.990 Khz */
+       { DRM_MODE("800x600", DRM_MODE_TYPE_DRIVER, 26989, 800, 880,
+                  960, 1080, 0, 600, 697, 705, 833, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+       /* 1024x768@50.00 24.975 Khz */
+       { DRM_MODE("1024x768", DRM_MODE_TYPE_DRIVER, 34165, 1024, 1120,
+                  1216, 1368, 0, 768, 864, 872, 999, 0,
+                  DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC | 
+                       DRM_MODE_FLAG_INTERLACE) },
+};
+static const int drm_num_c25khz_modes =
+       sizeof(drm_c25khz_modes) / sizeof(struct drm_display_mode);
+
+/*
  * Autogenerated from the DMT spec.
  * This table is copied from xfree86/modes/xf86EdidModes.c.
  */
@@ -1917,6 +1978,46 @@
 	       (mode->vsync_start - mode->vdisplay == 3);
 }
 
+struct drm_display_mode *drm_mode_find_c15khz(struct drm_device *dev,
+                                          int hsize, int vsize, int fresh)
+{
+       int i;
+
+       for (i = 0; i < drm_num_c15khz_modes; i++) {
+               const struct drm_display_mode *ptr = &drm_c15khz_modes[i];
+               if (hsize != ptr->hdisplay)
+                       continue;
+               if (vsize != ptr->vdisplay)
+                       continue;
+               if ((fresh != 0) && (fresh != drm_mode_vrefresh(ptr)))
+                       continue;
+
+               return drm_mode_duplicate(dev, ptr);
+       }
+       return NULL;
+}
+EXPORT_SYMBOL(drm_mode_find_c15khz);
+
+struct drm_display_mode *drm_mode_find_c25khz(struct drm_device *dev,
+                                          int hsize, int vsize, int fresh)
+{
+       int i;
+
+       for (i = 0; i < drm_num_c25khz_modes; i++) {
+               const struct drm_display_mode *ptr = &drm_c25khz_modes[i];
+               if (hsize != ptr->hdisplay)
+                       continue;
+               if (vsize != ptr->vdisplay)
+                       continue;
+               if ((fresh != 0) && (fresh != drm_mode_vrefresh(ptr)))
+                       continue;
+
+               return drm_mode_duplicate(dev, ptr);
+       }
+       return NULL;
+}
+EXPORT_SYMBOL(drm_mode_find_c25khz);
+
 /*
  * drm_mode_find_dmt - Create a copy of a mode if present in DMT
  * @dev: Device to duplicate against
diff -Naur linux-5.3_stock/drivers/gpu/drm/drm_modes.c linux-5.3/drivers/gpu/drm/drm_modes.c
--- linux-5.3_stock/drivers/gpu/drm/drm_modes.c	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/drivers/gpu/drm/drm_modes.c	2019-09-16 13:34:12.212224315 +0200
@@ -1514,6 +1514,8 @@
 	int xres = 0, yres = 0;
 	int remaining, i;
 	char *end_ptr;
+        int c15khz = 0;
+        int c25khz = 0;
 
 	xres = simple_strtol(str, &end_ptr, 10);
 	if (end_ptr == str)
@@ -1540,6 +1542,14 @@
 		case 'R':
 			rb = true;
 			break;
+		case 'c':
+			c15khz = 1;
+			c25khz = 0;
+			break;
+		case 'z':
+			c15khz = 0;
+			c25khz = 1;
+			break;
 		default:
 			/*
 			 * Try to pass that to our extras parsing
@@ -1564,6 +1574,8 @@
 	mode->yres = yres;
 	mode->cvt = cvt;
 	mode->rb = rb;
+        mode->c15khz = c15khz ? true : false;
+        mode->c25khz = c25khz ? true : false;
 
 	return 0;
 }
diff -Naur linux-5.3_stock/drivers/gpu/drm/drm_probe_helper.c linux-5.3/drivers/gpu/drm/drm_probe_helper.c
--- linux-5.3_stock/drivers/gpu/drm/drm_probe_helper.c	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/drivers/gpu/drm/drm_probe_helper.c	2019-09-16 11:16:29.744226733 +0200
@@ -478,6 +478,12 @@
 		goto prune;
 	}
 
+      if (connector->c15khz)
+               goto prune;
+
+       if (connector->c25khz)
+               goto prune;
+
 	count = (*connector_funcs->get_modes)(connector);
 
 	/*
diff -Naur linux-5.3_stock/include/drm/drm_connector.h linux-5.3/include/drm/drm_connector.h
--- linux-5.3_stock/include/drm/drm_connector.h	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/include/drm/drm_connector.h	2019-09-16 11:16:29.746226704 +0200
@@ -1059,6 +1059,10 @@
 	 * @tv_margins: TV margins to apply to the mode.
 	 */
 	struct drm_connector_tv_margins tv_margins;
+
+        bool c15khz;
+        bool c25khz;
+
 };
 
 /**
@@ -1377,6 +1381,12 @@
 	/** @tile_v_size: vertical size of this tile. */
 	uint16_t tile_h_size, tile_v_size;
 
+	/* 15KHz output */
+	bool c15khz;
+
+	/* 25KHz output */
+	bool c25khz;
+
 	/**
 	 * @free_node:
 	 *
diff -Naur linux-5.3_stock/include/drm/drm_edid.h linux-5.3/include/drm/drm_edid.h
--- linux-5.3_stock/include/drm/drm_edid.h	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/include/drm/drm_edid.h	2019-09-16 11:16:29.748226676 +0200
@@ -497,6 +497,10 @@
 bool drm_edid_is_valid(struct edid *edid);
 void drm_edid_get_monitor_name(struct edid *edid, char *name,
 			       int buflen);
+struct drm_display_mode *drm_mode_find_c15khz(struct drm_device *dev,
+					      int hsize, int vsize, int fresh);
+struct drm_display_mode *drm_mode_find_c25khz(struct drm_device *dev,
+					      int hsize, int vsize, int fresh); 
 struct drm_display_mode *drm_mode_find_dmt(struct drm_device *dev,
 					   int hsize, int vsize, int fresh,
 					   bool rb);
diff -Naur linux-5.3_stock/scripts/depmod.sh linux-5.3/scripts/depmod.sh
--- linux-5.3_stock/scripts/depmod.sh	2019-09-15 23:19:32.000000000 +0200
+++ linux-5.3/scripts/depmod.sh	2019-09-16 11:22:38.609923526 +0200
@@ -1,5 +1,5 @@
 #!/bin/sh
-# SPDX-License-Identifier: GPL-2.0
+exit 0
 #
 # A depmod wrapper used by the toplevel Makefile
 
